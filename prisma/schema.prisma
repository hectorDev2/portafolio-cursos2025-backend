// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
  
// Modelo para los Usuarios
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // ¡Importante! En una aplicación real, siempre almacena contraseñas hasheadas.
  name      String?
  role      Role     @default(DOCENTE) // Administrador, Docente, Evaluador
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones:
  // Un usuario (docente) puede tener muchos portafolios
  portfolios Portfolio[]
  // Un usuario (evaluador) puede dejar muchos feedbacks
  feedbacks  Feedback[]
}

// Enum para los roles de usuario
enum Role {
  ADMINISTRADOR
  DOCENTE
  EVALUADOR
}

// Modelo para Portafolio de Cursos
model Portfolio {
  id          String    @id @default(uuid())
  title       String    // Título del portafolio (ej. "Portafolio de Metodologías de Desarrollo de Software")
  description String?   // Descripción general del portafolio
  semester    String    // Semestre al que pertenece el portafolio (ej. "2025-1")
  
  // NUEVOS CAMPOS AÑADIDOS para la información del curso
  courseName  String    // Nombre del curso (ej. "Metodologías de Desarrollo de Software")
  courseCode  String?   // Código del curso (ej. "INF-401")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relación con el Docente que creó el portafolio
  docenteId   String
  docente     User      @relation(fields: [docenteId], references: [id])

  // Relaciones con los contenidos del portafolio:
  // Un portafolio puede contener muchos documentos (sílabos, diapositivas, etc.)
  documents   Document[]
  // Un portafolio puede recibir múltiples feedbacks
  feedbacks   Feedback[]
}

// Modelo para los Documentos o Materiales dentro del Portafolio
// Este modelo es flexible para almacenar diferentes tipos de contenido.
model Document {
  id           String    @id @default(uuid())
  fileName     String
  fileUrl      String    // URL del archivo almacenado (ej. en almacenamiento en la nube)
  fileSizeMB   Float     // Tamaño del archivo en MB (límite de 5 MB por documento)
  
  // Tipo específico del documento:
  // Ejemplos: "silabo", "diapositiva", "guia", "practica", "lectura",
  // "asignacion", "examen", "trabajo_estudiantil"
  fileType     String    
  
  // Categoría específica para trabajos estudiantiles (e.g., "excelente", "pobre")
  // Será nulo para otros tipos de documentos.
  category     String?   
  
  uploadedAt   DateTime  @default(now())
  
  // Relación con el Portafolio al que pertenece el documento
  portfolioId  String
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id])
}

// Modelo para el Feedback (retroalimentación) de los evaluadores
model Feedback {
  id           String    @id @default(uuid())
  comment      String
  // Puedes añadir un campo 'rating' (Int) si necesitas una calificación numérica.
  createdAt    DateTime  @default(now())

  // Relación con el Evaluador que proporcionó el feedback
  evaluatorId  String
  evaluator    User      @relation(fields: [evaluatorId], references: [id])

  // Relación con el Portafolio al que se le dio feedback
  portfolioId  String
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id])
}